"""
Django settings for SmartAccounts project.

Generated by 'django-admin startproject' using Django 5.1.11.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

# Set Google Vision API credentials from .env if available (must be before any Google API usage)
import os
from decouple import config

GOOGLE_CREDENTIALS_PATH = config("GS_CREDENTIALS", default=None)
if GOOGLE_CREDENTIALS_PATH:
    os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = GOOGLE_CREDENTIALS_PATH


# --- Google Cloud Storage settings (must be set before any model/file import) ---
from decouple import config, AutoConfig
from google.oauth2 import service_account
from pathlib import Path
import dj_database_url
import json
import base64


GS_BUCKET_NAME = config("GS_BUCKET_NAME", default="smart-account-reciept-holder")
GS_CREDENTIALS_B64 = os.environ.get("GS_CREDENTIALS_B64")
GS_CREDENTIALS = None
if GS_CREDENTIALS_B64:
    creds_json = base64.b64decode(GS_CREDENTIALS_B64).decode("utf-8")
    GS_CREDENTIALS = service_account.Credentials.from_service_account_info(
        json.loads(creds_json)
    )
    # Set for Vision API usage
    os.environ["GS_CREDENTIALS_JSON"] = creds_json
elif config("GS_CREDENTIALS", default=None):
    GS_CREDENTIALS_PATH = config("GS_CREDENTIALS")
    if not os.path.exists(GS_CREDENTIALS_PATH):
        raise FileNotFoundError(
            f"Google service account credentials file not found: {GS_CREDENTIALS_PATH}"
        )
    with open(GS_CREDENTIALS_PATH) as f:
        creds_json = f.read()
        GS_CREDENTIALS = service_account.Credentials.from_service_account_info(
            json.loads(creds_json)
        )
        os.environ["GS_CREDENTIALS_JSON"] = creds_json

# Set up storage and media settings
if GS_BUCKET_NAME and GS_CREDENTIALS:
    DEFAULT_FILE_STORAGE = "storages.backends.gcloud.GoogleCloudStorage"
    GS_DEFAULT_ACL = "publicRead"
    GS_FILE_OVERWRITE = False
    GS_LOCATION = "receipts"
    MEDIA_URL = f"https://storage.googleapis.com/{GS_BUCKET_NAME}/media/"
else:
    # Fallback to local storage if GCS is not configured
    MEDIA_URL = "/media/"
    MEDIA_ROOT = os.path.join(Path(__file__).resolve().parent.parent, "media")
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
auto_config = AutoConfig(search_path=BASE_DIR)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config("SECRET_KEY", default="django-insecure-temp-key-for-build")


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config("DEBUG", default="True", cast=bool)

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "accounts",  # Custom app for managing accounts
    "scanner",  # Custom app for managing accounts
    "payments",  # Custom app for payment processing
    "storages",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",  # For serving static files in production
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "SmartAccounts.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "SmartAccounts.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }
# SmartAccounts/settings.py

# Configuration for PostgreSQL database

# Database Configuration - FIXED FOR HEROKU
if "DATABASE_URL" in os.environ:
    # Heroku PostgreSQL database
    DATABASES = {"default": dj_database_url.parse(os.environ["DATABASE_URL"])}
else:
    # Local development database
    DATABASES = {
        "default": {
            "ENGINE": config(
                "DB_ENGINE", default="django.db.backends.postgresql_psycopg2"
            ),
            "NAME": config("DB_NAME", default="smartaccounts"),
            "USER": config("DB_USER", default="postgres"),
            "PASSWORD": config("DB_PASSWORD", default=""),
            "HOST": config("DB_HOST", default="localhost"),
            "PORT": config("DB_PORT", default="5432"),
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")


# WhiteNoise configuration
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# Use classic Django config for Google Cloud Storage
DEFAULT_FILE_STORAGE = "storages.backends.gcloud.GoogleCloudStorage"

# Redirect all login-required redirects to /login/
LOGIN_URL = "/login/"

# Stripe Configuration
STRIPE_PUBLISHABLE_KEY = config("STRIPE_PUBLISHABLE_KEY", default="")
STRIPE_SECRET_KEY = config("STRIPE_SECRET_KEY", default="")
# STRIPE_WEBHOOK_SECRET = config("STRIPE_WEBHOOK_SECRET", default="")
